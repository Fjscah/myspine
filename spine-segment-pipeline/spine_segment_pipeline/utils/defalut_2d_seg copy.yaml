# den profile identify dendrite and spine , so num class =3
Path:
  Train_path: D:/data/Train/Train/2D-2023-seg/ # dataset root folder

  oridata_path: "" #  defalt  Train_path/img    stroe large img eg 512*512
  orilabel_path: "" # defalt  Train_path/label  stroe label for img eg 512*512
  
  data_path: "" #  defalt Train_path/imgcrop    store small img eg 128*125
  label_path: "" # defalt  Train_path/labelcrop will crop from whole img , eg from 512 to 256,128 , see input size

  log_path: "../test-dataset/log/2D/seg/"  #  defalt  Train_path/log error tensorboard score log dir
  model_path : "../test-dataset/model/2D/seg" ##  defalt  Train_path/model
  model_save_path: "../test-dataset/model/2D/seg/model.ckpt" # no use
  

  save_suffix: "segment" # [box,point,mask]
  label_suffix: "-seg"

  filetype: ".tif"

  model_load_path: "models/M2d_seg/model/best/" #no use
  tfrecord_path: "../test-dataset/Train/seg/tfrecord" # no use : store train and test tfrecord
Data:
  axes: 'yx' # change to zyx ,todo
  z_factor: 2.0 # z spacing / x spancing ,x spacing=y spacing,todo
  input_sizez: 1  # Input depth ,z
  input_sizexy: 256   # 256*256,Input feature width/height,for crop generate img data
  num_classes: 3 # include zero background
  partion : [0.6,0.2,0.2] # train,valid,test+=1
  c_val : "auto" # background value
  train_paths: 'train.tfrecords'
  validation_paths: 'validation.tfrecords'
  test_paths: 'test.tfrecords'
  inputchannel: 1 # 1: grayscale,todo
  data_augmentation:
    translate: false
    flip: true
    rotate: true
    probability: 0.3
    affine: 0.3
  scaling: "FullRange" # FullRange, DatasetNorm, DatasetSTD, StackNorm, StackSTD, PatchNorm, PatchSTD
  padding_type: 'REFLECT'
  padding_type_depth: 'CONSTANT'
  buffer_size: 750
  d_weight: True
  weight_method:
    type: 'window'
    at_stack_level: True
    use_depth_context: True
    cutoff_dist: 5
    close_weight: 2
    far_weight: 2  
Training:
  model : "unet2d" # unet2d vnet ...
  loss_type: 'w_cross_entropy'
  batch_size: 4
  cls_weight: [1,1,1]
  epochs: 200
  optimizer_name: "Adam" # supports [Adam, Adagrad, RMSProp]
  learning_rate: 0.0001
  denovo : False
  learning_rate_type: "None"
  deep_supervision: false
  validate_iterations: 1000 # saves weights every n iterations
  convergence_iterations: 1000
  seed: 42
  
Test:
  images_output_path: 'output/M1/images'
  batch_size: 1
  data_path:
    - 'test.tfrecords'
Network:
  
  load_model: True
  base_filter: 16
  activation_function: "relu" # supports [relu, leaky_relu]
  droput: True
  droput_probability: 0.15 # value in range [0 - 1]
  kernel_init: 'he_normal'  # He, normal
  kernel_regularizer: 'None' # "None","L2"
  reg_factor: 0.0
  mixed_precision: True
  use_shallow_network: True
  layer_num: 3 #todo


