
Path:
  ori_path: E:/data/myspine-dataset/2D-morph-seg # dataset root folder
  oriimg_path: "" #  defalt  ori_path/img    stroe large img eg 512*512
  orilabel_path: "" # defalt  ori_path/label  stroe label for img eg 512*512
  
  exp_path: "../DATA/2d_segL2pp"
  crop_path: "../DATA/2d_seg/data" #  defalt exp_path/data/    

  img_path: "" #  defalt exp_path/data/imgcrop    store small img eg 128*125
  label_path: "" # defalt  exp_path/data/labelcrop will crop from whole img , eg from 512 to 256,128 , see input size

  log_path: ""  #  defalt  exp_path/log error , tensorboard score log dir,configure dir/log path
  model_path : "" #  defalt  exp_path/model, configure dir/model path
  model_save_path: "DATA/model/2Dtorchune3/seg/best.ckpt" # no use
  

  save_suffix: "-ins" # -border todo : -den -spine
  label_suffix: "-seg"

  filetype: ".tif"

Data:
  axes: 'yx' # change to zyx ,todo
  z_factor: 2.0 # z spacing / x spancing ,x spacing=y spacing,todo
  input_sizez: 1  # Input depth ,z
  input_sizexy: 256   # 256*256,Input feature width/height,for crop generate img data
  num_class: 3 # include zero background
  inputchannel: 1 # 1: grayscale,todo
  partion : [0.8,0.2,0.0] # train,valid,test+=1
  c_val : "auto" # background value
  data_augmentation: #no use todo
    translate: false
    flip: true
    rotate: true
    probability: 0.3
    affine: 0.3

    
Training:
  task_type: "seg"
  Network:
    name : "unet++" # unet2d unet++  ...
    kwargs: {
      num_classes : 3,
      input_channels : 1,
      layer_num: 2 ,
      out_layer: "sigmoid" #softmax ,sigmoid
    
    }

  loss_type:
    name: "FocalLoss" #'b_cross_entropy' 'w_cross_entropy' 'FocalLoss'
    kwargs: {
    
      mode: "multiclass", # "binary", "multiclass", "multilabel"
      gamma: 2
    }
  
  Metrics:
    name : "unet_miou"
    kwargs: {
    
      ignore_labels: [0,1],
      mode: "sigmoid", # "softmax", "sigmoid"
    }
   
  instance:
    name :  unet_cluster
    kwargs: {}

  batch_size: 16
  keep_top: 10
  loss_plot_epoch: 1
  visual_epoch : 1
  mAP_epoch : 10   

  cls_weight: [1,1,1]
  epochs: 100
  optimizer_name: "Adam" # supports [Adam, Adagrad, RMSProp]
  learning_rate: 0.001
  denovo : False
  learning_rate_type: "None"
  deep_supervision: false # for unet ++
  #validate_iterations: 1000 # saves weights every n iterations
  #convergence_iterations: 1000

  seed: 42
Network:
  modelname : "unet++" # unet2d unet++  ...
  load_model: True
  base_filter: 16
  activation_function: "relu" # supports [relu, leaky_relu]
  droput: True
  droput_probability: 0.15 # value in range [0 - 1]
  kernel_init: 'he_normal'  # He, normal
  kernel_regularizer: 'None' # "None","L2"
  reg_factor: 0.0
  mixed_precision: True
  use_shallow_network: True
  

